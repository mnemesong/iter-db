import { describe, it } from "mocha";
import { IterDb } from "../src/IterDb";
import * as assert from "assert"

describe("test ListDb", () => {
    it("test scenario 1", () => {
        const db: IterDb<any> = (new IterDb())
        db.push(12)
        db.push("John Konor")
        db.push([false, true, false])
        const iterId = db.regIter()
        assert.ok(iterId.length > 0)
        const iter = db.getIter(iterId)
        assert.ok(!iter.isReaded())
        assert.equal(iter.read(), 12)
        assert.ok(iter.isReaded())
        assert.ok(iter.next())
        assert.ok(!iter.isReaded())
        assert.ok(!iter.isFinish())
        assert.equal(iter.read(), "John Konor")
        let id = db.push(999)
        assert.equal(id, 3)
        assert.ok(iter.isReaded())
        assert.ok(Array.isArray(iter.next().read()))
        assert.equal(iter.next().read(), 999)
        assert.ok(iter.next().isFinish())
    })

    it("test scenario 2", () => {
        const db: IterDb<any> = (new IterDb())
        let id = db.push(12)
        assert.equal(id, 0)
        db.push("John Konor")
        db.push([false, true, false])
        const iterId = db.regIter()
        assert.ok(iterId.length > 0)
        const iter = db.getIter(iterId)
        assert.ok(!iter.isReaded())
        assert.equal(iter.read(), 12)
        assert.ok(iter.isReaded())
        assert.ok(iter.next())
        assert.ok(!iter.isReaded())
        assert.equal(iter.read(), "John Konor")
        const iter2Id = db.regIter()
        const iter2 = db.getIter(iter2Id)
        db.push(999)
        assert.ok(iter.isReaded())
        assert.ok(Array.isArray(iter.next().read()))
        assert.equal(iter.next().read(), 999)
        assert.ok(!iter2.isReaded())
        assert.equal(iter2.read(), 12)
        assert.equal(iter2.next().read(), "John Konor")
    })

    it("test scenario 3", () => {
        const db: IterDb<any> = (new IterDb())
        const id = db.push(12)
        db.push("John Konor")
        db.push([false, true, false])
        db.push({ i: 43, val: { name: "\"[Jona<ta>n\"]", vals: [12, 13] } })
        db.push(999)
        const json = db.serializeToJson()
        db.parseFromJson(json)
        const iterId = db.regIter()
        const iter = db.getIter(iterId)
        assert.equal(iter.read(), 12)
        assert.equal(iter.next().read(), "John Konor")
        assert.ok(Array.isArray(iter.next().read()))
        assert.equal(iter.next().read().val.name, "\"[Jona<ta>n\"]")
        assert.equal(iter.next().read(), 999)
    })
})